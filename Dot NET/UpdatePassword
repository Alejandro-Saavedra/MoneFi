
namespace MoneFi.Services
{
    public class UserService : IUserService, IBaseUserMapper
    {
        private IAuthenticationService<int> _authenticationService;
        private IDataProvider _dataProvider;
        private IEmailService _emailProvider;

        public UserService(IAuthenticationService<int> authSerice, IDataProvider dataProvider, IEmailService emailProvider)
        {
            _authenticationService = authSerice;
            _dataProvider = dataProvider;
            _emailProvider = emailProvider;
        }

   public string GetUserPassword(int userId)
        {
            string hashedPassword = null;
            string procName = "[dbo].[PasswordRetrievalProc]";

            _dataProvider.ExecuteCmd(procName, delegate (SqlParameterCollection parameterCollection)
            {
                parameterCollection.AddWithValue("@Id", userId);
            }, delegate (IDataReader reader, short set)
            {
                
               hashedPassword = reader.GetSafeString(1);
            }
            );
            return hashedPassword;
        }

     public void UpdateUserEmail(UserEmailUpdateRequest request, string requestUrl)
        {
            string newEmail = request.Email;
            string currentPassword = request.CurrentPassword;

            string existingHashedPassword = GetUserPassword(request.Id);
            bool isValidPassword = BCrypt.BCryptHelper.CheckPassword(currentPassword, existingHashedPassword);

            if (!isValidPassword)
            {
                throw new Exception("Current password is incorrect");
            }
            int updateStatus = 0;
            string procName = "[dbo].[UpdateEmailProc]";

            _dataProvider.ExecuteNonQuery(procName, inputParamMapper: delegate (SqlParameterCollection paramCollection)
            {
                paramCollection.AddWithValue("@Id", request.Id);
                paramCollection.AddWithValue("@Email", request.Email);

                SqlParameter statusParam = new SqlParameter("@Status",SqlDbType.Int);
                statusParam.Direction = ParameterDirection.Input;
                paramCollection.Add(statusParam);
            },returnParameters: delegate (SqlParameterCollection paramCollection)
            {
                updateStatus = (int)paramCollection["@Status"].Value;
            }
            );

            if (updateStatus == 1)
            {



                User user = GetById(request.Id);

                if (user != null)
                {
                    SendEmailRequest email = new SendEmailRequest();
                    email.Sender = new EmailInfo();
                    email.Sender.Email = "no-reply@example.com";
                    email.Sender.Name = "Account Management";
                    email.To = new EmailInfo();
                    email.To.Email = user.Email;
                    email.To.Name = $"{user.FirstName} {user.LastName}";
                    email.Subject = "Email Change Confirmation";

                    string loginUrl = requestUrl;

                    _emailProvider.UpdateUserEmail(email, loginUrl);
                }
            }
            else
            {
                throw new Exception("Email already exists");
            }
        }


 public void UpdateUserPassword(UserPasswordUpdateRequest request, string requestUrl)
        {
            string currentPassword = request.CurrentPassword;
            string newPassword = request.NewPassword;

            string existingHashedPassword = GetUserPassword(request.Id);
            bool isValidPassword = BCrypt.BCryptHelper.CheckPassword(currentPassword, existingHashedPassword);

            if (!isValidPassword)
            {
                throw new Exception("Current password is incorrect");
            }

            string procName = "[dbo].[UserPasswordProc]";

            
            string hashedNewPassword = BCrypt.BCryptHelper.HashPassword(newPassword, BCrypt.BCryptHelper.GenerateSalt());

            _dataProvider.ExecuteNonQuery(procName, inputParamMapper: delegate (SqlParameterCollection paramCollection)
            {
                paramCollection.AddWithValue("@Id", request.Id);
                paramCollection.AddWithValue("@Password", hashedNewPassword);
            },returnParameters: null
            );

            User user = GetById(request.Id);

            if (user != null)
            {
                SendEmailRequest email = new SendEmailRequest();
                email.Sender = new EmailInfo();
                email.Sender.Email = "no-reply@example.com";
                email.Sender.Name = "Account Management";
                email.To = new EmailInfo();
                email.To.Email = user.Email;
                email.To.Name = $"{user.FirstName} {user.LastName}";
                email.Subject = "Password Change Confirmation";

                string loginUrl = requestUrl;
                _emailProvider.UpdateUserPassword(email, loginUrl);
            }
       }
}
